GIT - Local - manejo de proyectos - 
GIT HUB - Interfaz web - compatir proyectos


1-Crea un "repositorio" (proyecto) con una herramienta de alojamiento de Git (por ejemplo, Bitbucket)
2-Copia (o clona) el repositorio a tu máquina local.
3-Añade un archivo a tu repositorio local y confirma ("commit") los cambios.
4-Envía ("push") los cambios a la rama principal.


*** iniciar 
-> Me ubico en la carpeta con linea de comandos
-> git init  -> empezar en mi carpeta un repositorio
-> git add biografia.txt -> doy vida al archivo en el repo
-> git commit -m "Versión 1"
-> git add.    -> Agrego todos los archivos que hayan cambiado
-> git commit -m "Cambios a v1"
-> git status -> verificar estado
-> git show  -> mostrar todos los cambios del historico
-> git log biografia.txt  -> Verificar todos los cambios
-> git push -> mandar a un repositorio remoto
-> git pull -> traer todo de un repositorio remoto


**con git bash puedo trabajar desde la terminal en un pc windows
sudo apt-get install git
**para verificar si tengo git instalado
git
git --version

**introduccion a la terminal y linea de comandos
-> mirar donde estoy ubicado
pwd

-> ir a la carpeta raiz
cd

-> listar archivos de la carpeta
ls

-> argumento de listar todos archivos incluso los ocultos
ls -al

-> limpiar consola
clear

-> para autollenar
cd u + tab
->> cd users

-> crear un archivo vacio
touch vacio.txt

-> Historia de comandos
history

-> eliminar
rm vacio.txt

-> informacion sobre comando rm --help
-> control + l -> clear

****************

primero ubicarme en repo
y luego

git init

creo un archivo: ej historia.txt y luego

git add historia.txt

git rm --cached historia.txt -> quitarlo de la base de datos (ram)

despues vuelvo a dar

git add historia.txt

luego lo mando al repo usando

git commit -m "este es el primer commit"


si arroja error debemos usarlo 
git config
git config --list  -> ver configuracion por defecto


git config --list --show-origin  -> donde estan las configuraciones guardadas


git config --global user.name "Juan Rojas"
git config --global user.email "juan.orduz@rappi.com"


**retomando entonces
si cometi un error puedo visualizar el archivo usando:

cat historia.txt

** puedo abrir el archivo y modificarlo usando

code historia.txt

** despues de modificarlo le doy guardar

posteriromente añado los cambios y luego hago commit

git add historia.txt
git commit -m "cometi unos errores sobre el cambio"

## si tengo varios archivos puedo añadirlos todos usando

git add .

luego hago el commit 
git commit -m "cometi unos errores sobre el cambio"

puedo ver el historiar de cambios sobre el archivo usando log

git log historia.txt


**para ver los cambios puntuales puedo usar

git show historia.txt


si doy commit sin cambios me va mandar a un editor de codigo llamado vim

entonces doy 
esc + i
agrego el texto
enter
esc + shift + zz

**
para comparar los cambios de dos versiones hago lo siguiene:

git diff 360ce8856a32bbd474266dbe623aaecfe9e7b678 8990ea031216275a49b609469dc52c72496906c9


######los repos se guardan en ram


git init

directorio      ->  staging    ->  repositorio
proyecto 1
historia.txt

antes de git add el archivo esta sin rastrear
git add. -> mando el archivo a un estado temporal en ram llamado staging y ademas esta rastreado
git commit -m "asf" -> mando el arhivo a un repositorio llamado master
  
**Para volver a una version anterior (tener cuidado)

git reset 360ce8856a32bbd474266dbe623aaecfe9e7b678 --hard      -> todo vuelve al estado anterior
git reset 360ce8856a32bbd474266dbe623aaecfe9e7b678 --soft      -> todo vuelve a la version anterior pero lo que esta en staging sigue en staging

**agregamos dos nuevos archivos html y los mandamos a staging

**si quiero ver la primera version puedo usar checkout
git checkout 360ce8856a32bbd474266dbe623aaecfe9e7b678 historia.txt


**para volver a la version master uso:
git checkout master historia.txt

git log 
git log --stat


git rm vs git reset:


git rm --cached -> elimina archivos del repo y del area de staging pero los mantiene en disco duro
git rm --force -> elimina archivos del repo y del area de staging y tambien del disco duro

para volver al pasado sin poder volver al futuro (sobreescribir) usamos: 
git reset --soft    -> borra toda la informacion de commits y del area de staging
git reset --hard    -> borra toda la informacion de commits y del area de staging



Esto es en caso de manejar un repositorio local

En caso de tener un repositorio remoto debo clonar ese repositorio a mi computadora

***Crear rama nueva
git branch cabecera

git checkout cabecera

hago un cambio en blogpost.html

hago el add y commit


*****fusion de ramas con merge
hago los cambios del archivo en cada rama
y posteriormente haciendo el commit

para hacer el merge debo estar en la rama donde quiero que quede de la otra rama
pero debo hacerlo en forma de commit


git merge cabecera 


para hacer commit y add al tiempo puedo usar:

git commit -am "comentario"


adicional a eso puedo usar un merge desde cabecera para traer lo de master

**Si hago modificaciones en las mismas lineas de codigo en ambas ramas e intento
hacer la fusion, voy a generar conflicto. Entonces debo decidirme por una y mandar los cambios.


GITHUB
-Repositoria manual

https://github.com/juanrojasorduz/hyperblog.git

crear un origin remoto
git remote add origin https://github.com/juanrojasorduz/hyperblog.git

git remote

git remote -v

git push origin master
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

debo primero traer archivos de master
readme

para fusionar lo que tengo en remoto con lo local uso:
git pull origin master --allow-unrelated-histories

puedo modificar el archivo desde git hub

.

llave publica y privada
abro git bash
cd

git congif -l

git config --global user.email "jdrojaso@hotmail.com"

ssh-keygen -t rsa -b 4096 -C "jdrojaso@hotmail.com"

Este equipoEste equipo

abro la carpeta .ssh en usuario

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBJvTFtIiyp4UCs0fDeIelcOwmsbAiB5kj3qzlNHm4r2TmlzcoER0s/NlMT1eYQlROyXMHchVPCCe0EqDslEeEIHEy3jGa4sBRs2AqCadTp9rUMnDSF/A6ar4TdviWkRoQBKfHDjoDxEnG2h20r5BHiJhOok9wTtJLR8cO309tmptQeCQ8uBEbPeLQxY/bPuH/TS99Q9tDyOB+yPc+f3seYdFuvQsadRcDUC6+PjXpcplFtdESqlbOcriTpThTu2F/mazHJ2G+yo1RWB8WjzNYLu+QvmumvnyPSMPGa2zUo26ZWwvIhQv3YTyJ3jBnEp/DA61e0pBxayTWoh0KM5W+VJDNFKY2r/2VLlJYwPH5Qf4LClF7aK1KgNBhFsbKxXMDo2RYnQfI/Jb3pZSbYzscjB21CDw/JDYiGdilrXftubA6gzGJPsTeVEEhmu231BA7Cw8+j72ynSTf8t29xRSHIerZlitbFQcuZyVMczX3eZyDxT5g4mUoqF/RxetAQxczzisIDQ9WuzFCrglW98UZwY7JTiV0BIV97jMxarqipPepK+ODE2a0WJ5C6aygBiX2y8xHUTCqrSfbqtjbC+dIwxLZmkOw1TjZbgTnrkchuVjUOU+7fULJDo7T641WXtyKcIw+IngAuLXyyn4Qykds4mKWGEALe+N/ynwLeYiqXQ== jdrojaso@hotmail.com


verificamos que ssh este corriendo
eval $(ssh-agent -s)

copiamos en clone ssh
git@github.com:juanrojasorduz/hyperblog.git

$ git remote set-url origin git@github.com:juanrojasorduz/hyperblog.git

git remote-v

git diff


git log --all --graph --decorate --oneline

comando linux para alias:

alias arbolito="git log -all --graph --decorate --oneline"

creando tag
git tag -a v0.1 -m "Resultado de las primeras clases del curso" e526c73 
git tag
git show-ref --tags

git pull origin master

git push origin --tags


crear otro tag:
git tag -a dormido -m "Resultado de las primeras clases del curso" e526cw1


para borrar un tag 
git tag -d dormido
git push origin :refs/tags/dormido


como enviar diferentes ramas al servidor
git show-branch --all

comando visual para ver cambios
gitk

creo header y footer
git branch header
git branch footer


si un usuario clona el repositorio y no tiene acceso a el
el dueño del proyecto se lo da y para ello se debe ir a 
settings y luego agregar al colaborador por user name

**
Pull request
Fork-> 


estudiar como usar gitignore

uso de git stash (congelar un cambio sin tener que hacer commit)

git stash
git stash list
git stash pop
git stash branch english-version (guardar en rama alterna)
git stash drop

##si agrego archivos como copias etc y quiero eliminarlos puedo usar
git clean --dry-run
git clean -f

para traer un commit viejo de otra rama a master se usa:
git cherry-pick dca2a24


si hice un commit y olvidé algun cambio
puedo hacer el cambio luego hago git add y para fusionar
este cambio con el anterior commit uso:

git commit --amend

para ver la historia asi haya borrado una rama

git reflog  (para obtener el tag del cambio "HEAD@{4}")
git reset --HARD HEAD@{4}


para ver en que archivos aparece la palabra la,puedo usar:

git grep la

para contar cuantas veces aparece Platzi puedo usar:

git grep -c Platzi

*Cuantos commits ha hecho cada miembro del equipo:

git shortlog -sn --all --no-merges


para ver como funciona un comando en este caso blame puedo usar:

git blame --help


para ver las branch existentes en remoto usamos:
git branch -a



###Examen respues incorrectas:
***que guarda git
(descartar) los archivos completos por cada version de un proyecto


***En un repositorio publico en github que pueden hacer los colaboradores
(descartar) solo hacer pull request y con permiso del dueño hacer push/pull,crear ramas

Por defecto, cualquier persona puede clonar o descargar tu proyecto desde GitHub, pero no pueden crear commits, ni ramas, ni nada.

Existen varias formas de solucionar esto para poder aceptar contribuciones. Una de ellas es añadir a cada persona de nuestro equipo como colaborador de nuestro repositorio.

Solo debemos entrar a la configuración de colaboradores de nuestro proyecto (Repositorio > Settings > Collaborators) y añadir el email o username de los nuevos colaboradores.




**dentro del desafio

<div id="post">



**cuando usas git stash,los cambios que guardas temporalmente se guardan en:
descartar repositorio local,en una rama nueva stash

Git Stash: Guardar cambios en memoria y recuperarlos después
 

**como guardas gitk?

cuando instalo git viene por defecto


**Por defecto github usa la rama main como la rama principal.podemos cambiar la rama principal?

Verdadero
































